name: Pipeline

on:
  push:
    branches-ignore:
      - main

permissions:
  contents: read
  pull-requests: write
    
jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Check linting
      run:  ruff check .

    - name: Test with pytest
      run: pytest test_app.py

    - name: Test with coverage
      run: |
        coverage run -m pytest
        coverage report
        coverage xml

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Create PR
      if: success()
      uses: desbravacloud/action-create-pull-requests@v1
      with:
        origin-branch: '${{ github.ref_name }}'
        target-branch: 'main'
        custom-title: 'PR created -'
        custom-body: 'Functionality started'

    - name: Slack notification for success
      if: success()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.WEBHOOKS_SLACK_URL }}
        SLACK_USERNAME: Test Bot
        SLACK_ICON_EMOJI: robot_face
        SLACK_CHANNEL: test
        SLACK_MESSAGE: 'Test successful!'
        SLACK_COLOR: success
        MSG_MINIMAL: Actions URL,Commit
        SLACK_FOOTER: Ingeniería y Calidad de Software - UTN

    - name: Slack notification for failure
      if: failure()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.WEBHOOKS_SLACK_URL }}
        SLACK_USERNAME: Test Bot
        SLACK_ICON_EMOJI: robot_face
        SLACK_CHANNEL: test
        SLACK_MESSAGE: 'Test Failed!'
        SLACK_COLOR: failure
        MSG_MINIMAL: Actions URL,Commit
        SLACK_FOOTER: Ingeniería y Calidad de Software - UTN

  deploy:
    runs-on: ubuntu-latest
    needs: [tests]

    steps:
    - name: Deploy to Render
      uses: sws2apps/render-deployment@main
      with:
        serviceId: ${{ secrets.RENDER_SERVICE_ID }}
        apiKey: ${{ secrets.RENDER_API_KEY }}
        multipleDeployment: false
    
    - name: Slack notification for success
      if: success()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.WEBHOOKS_SLACK_URL }}
        SLACK_USERNAME: Deploy Bot
        SLACK_ICON_EMOJI: robot_face
        SLACK_CHANNEL: deploy
        SLACK_MESSAGE: 'Deploy successful!'
        SLACK_COLOR: success
        MSG_MINIMAL: Actions URL,Commit
        SLACK_FOOTER: Ingeniería y Calidad de Software - UTN

    - name: Slack notification for failure
      if: failure()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.WEBHOOKS_SLACK_URL }}
        SLACK_USERNAME: Deploy Bot
        SLACK_ICON_EMOJI: robot_face
        SLACK_CHANNEL: deploy
        SLACK_MESSAGE: 'Deploy Failed!'
        SLACK_COLOR: failure
        MSG_MINIMAL: Actions URL,Commit
        SLACK_FOOTER: Ingeniería y Calidad de Software - UTN